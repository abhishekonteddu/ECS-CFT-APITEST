AWSTemplateFormatVersion: "2010-09-09"
Description: My ECS stack.
# Parameters 
Parameters:
  pStage:
    Description: Stage type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  pContainerMemory:
    Description: Memory for the fargate Task
    Type: Number
    Default: 2048
  pContainerCpu:
    Description: Cpu for the fargate task
    Type: Number
    Default: 1024
  pVPCID:
    Description: Id of and existing Development VPC
    Type: "AWS::EC2::VPC::Id"
    ConstraintDescription: Must be a valid VPC.
  pSubnetId1:
    Description: "Private subnet for confidential apps "
    Type: "AWS::EC2::Subnet::Id"
    MinLength: "1"
    MaxLength: "255"
    ConstraintDescription: Must be a valid Private Subnet.
  pSubnetId2:
    Description: "Private subnet for confidential apps "
    Type: "AWS::EC2::Subnet::Id"
    MinLength: "1"
    MaxLength: "255"
    ConstraintDescription: Must be a valid Private Subnet.
  pSubnetId3:
    Description: "Private subnet for confidential apps "
    Type: "AWS::EC2::Subnet::Id"
    MinLength: "1"
    MaxLength: "255"
  pCloudWatchLogRetain:
    Description: Cloudwatch logs regain in days
    Type: Number
    Default: 7
    MinValue: 1
    MaxValue: 3653

Metadata:
  # The AWS::CloudFormation::Interface key contains metadata that specifies how AWS CloudFormation presents the
  # parameters and outputs in the AWS Management Console. The key is used to define the parameter grouping and
  # parameter labels for the parameters in this template.
  AWS::CloudFormation::Interface:
    ParameterLabels:
          pStage:
            default: Environment
          pContainerMemory:
            default: Container Memory
          pContainerCpu:
            default: Container CPU
          pVPCID:
            default: VPC ID
          pSubnetId1:
            default: Subnet 1
          pSubnetId2:
            default: Subnet 2
          pSubnetId3:
            default: Subnet 3
          pCloudWatchLogRetain:
            default: cloudwatch logs retain in days  
    ParameterGroups:
      - Label:
          # The default key specifies the label that is displayed for the parameter group in the AWS Management Console.
          
          default: "Fargate Task Configuration"
        Parameters:
          # The below parameters included in the "Fargate Task Configuration" group, and it is given the
          # label "Environment", This label is displayed next to the parameter in the AWS Management Console.
          - pStage:
              Label: "Environment"
          
          # label "Container memory"
          - pContainerMemory:
              Label: "Container Memory"
          
          # label "Container CPU" 
          - Container CPU:
              Label: "Container CPU"
          
          # label "Container CPU" 
          - pVPCID:
              Label: "VPC ID"
          
          # label "Private subnet 1" 
          - pSubnetId1:
              Label: "Subent 1"

          # label "Private subnet 2" 
          - pSubnetId2:
              Label: "Subent 2"

          # label "Private subnet 3" 
          - pSubnetId3:
              Label: "Subent 3"

          # label "cloudwatch logs retention in days" 
          - pCloudWatchLogRetain:
              Label: "cloudwatch logs retain in days"

# Define the resources that will be created
Resources:

  # ECS cluster 
  myServiceECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub My-service-${pStage}-ecs-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # Define the ECS Service Role 
  myServiceECSRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub My-service-${pStage}-myServiceECSRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub My-service-${pStage}-MyServiceECSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParametersByPath
                  - ecs:RunTask
                Resource: "*"
      Path: "/"

  # Define the IAM role for the task execution
  myServiceECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "MyService-${pStage}-Task-ExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub My-service-${pStage}-MyServiceTaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                Resource: "*"
      Path: "/"

  myServiceCloudWatchEventRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "my-${pStage}-Service-CloudWatchEventRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub my-service-${pStage}-MyServiceECSTaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: !Ref myServiceEcsTaskDefinition
        - PolicyName: !Sub my-service-${pStage}-MyServiceECSTaskExecutionIAMPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
      Path: "/"
    DependsOn:
      - myServiceEcsTaskDefinition
  
  # Define the CloudWatch Log Group for the Fargate task's stdout
  myServiceEcsLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub my-service-${pStage}-task-LogsGroup
      RetentionInDays: !Ref pCloudWatchLogRetain

  # Define the Security group for forgate containers 
  myServiceFargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Fargate Security Group
      VpcId: !Ref pVPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Define the taskdefinition for the forgate conatiners
  myServiceEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref pContainerCpu
      Memory: !Ref pContainerMemory
      ExecutionRoleArn: !GetAtt
        - myServiceECSTaskExecutionRole
        - Arn
      Family: !Sub my-service-${pStage}-task-definition
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt myServiceECSRole.Arn
      ContainerDefinitions:

         # docker custome image which will pull from docker hub 
        - Image: !Sub "abhishekonteddu/ecsapitest:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref myServiceEcsLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          Name: !Sub my-service-${pStage}-MyServiceTaskContainer    
          Memory: !Ref pContainerMemory
          Cpu: !Ref pContainerCpu
          PortMappings:
            - { ContainerPort: 80 }

  # Define the scheduled task that will run the Fargate task once per minute
  myServiceScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule rule for My Service"
      Name: !Sub my-service-task-schedule-rule-${pStage}
      State: ENABLED
      # Run once per minute
      ScheduleExpression: cron(0/1 * ? * * *)
      Targets:
        - Arn: !GetAtt myServiceECSCluster.Arn
          Id: ScheduledTask
          RoleArn: !GetAtt myServiceCloudWatchEventRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref myServiceEcsTaskDefinition
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - !Ref myServiceFargateSecurityGroup
                Subnets:
                  - !Ref pSubnetId1
                  - !Ref pSubnetId2
                  - !Ref pSubnetId3
Outputs:
  # Output logs for cloudwatch log group 
  myServiceEcsLogsGroup:
    Description: The ID of the log
    Value: !Sub My-service-${pStage}-task-LogsGroup
